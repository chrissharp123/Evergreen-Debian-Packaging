#!/bin/bash
VERSION_=0.01

## Set work directory to current directory
WORKDIR="$(dirname $(readlink -f $0))"

# Customized files need to build the package.
BUILDFILESDIR="${WORKDIR}/files_for_build"

PKGFILE="opensrf-1.6.3.tar.gz"

## OpenSRF install prefix
OPENSRF_PREFIX="/openils"

## OpenSRF config directory.
OPENSRF_CONF_DIR="${OPENSRF_PREFIX}/conf"

ORIG_PKGFILE="../${PKGFILE}"
SOURCE_FOLDER="${WORKDIR}/$(echo $PKGFILE|awk -F".tar" '{ print $1 }')"
DEST_ROOT="${SOURCE_FOLDER}/debian/opensrf"
export DEBEMAIL="$(grep @ ${BUILDFILESDIR}/control|awk -F"[<>]" '{ print $2 }')"
export DEBFULLNAME="$(grep @ ${BUILDFILESDIR}/control|awk -F"[<>:]" '{ print $2 }')"

cd $WORKDIR

if [ ! -e "$ORIG_PKGFILE" ] 
	then
	echo "$ORIG_PKGFILE not found exiting..."
	echo
	exit 1
fi

if [ "$1" = "b" ] || [ "$1" = "-b" ]
	then
	echo
	echo "Not including Source"
	echo
	BuildPackage () {
	echo
	echo "Running dpkg-build-package -b -nc"
	#sleep 3
	dpkg-buildpackage -b -nc
	}
		else
		BuildPackage () {
		echo
		echo "Running dpkg-build-package -F -nc"
                #sleep 3
        	dpkg-buildpackage -F -nc
        	}
fi

## Remove everything for fresh start
rm -f ${WORKDIR}/*.changes
rm -f ${WORKDIR}/*.dsc
rm -f ${WORKDIR}/*.deb 
rm -f ${WORKDIR}/*.gz && echo "Removed old package files"
rm -rf $SOURCE_FOLDER && echo "Removed $SOURCE_FOLDER" && \

## Start over fresh
tar zxf ${ORIG_PKGFILE} -C ${WORKDIR} && \
cp -f ${ORIG_PKGFILE} ${WORKDIR} && \
cd $SOURCE_FOLDER && \
echo "Running dh_make on $PKGFILE" && \
## dh_make -s -f ../${PKGFILE} && \
dh_make -s -n && \
echo "Restoring rules file." && \
mkdir -p ${SOURCE_FOLDER}/DEBIAN && \


## copy our modified files to the debian folder in the source folder.
cp ${BUILDFILESDIR}/rules ${SOURCE_FOLDER}/debian/rules && \
cp ${BUILDFILESDIR}/control ${SOURCE_FOLDER}/debian/control && \
cp ${BUILDFILESDIR}/CONTROL ${SOURCE_FOLDER}/DEBIAN/control && \
cp ${BUILDFILESDIR}/config ${SOURCE_FOLDER}/debian/config && \
cp ${BUILDFILESDIR}/config ${SOURCE_FOLDER}/DEBIAN/config && \
cp ${BUILDFILESDIR}/postinst ${SOURCE_FOLDER}/debian/postinst && \
cp ${BUILDFILESDIR}/postinst ${SOURCE_FOLDER}/DEBIAN/postinst && \
#cp -p ${WORKDIR}/eg_opensrf ${SOURCE_FOLDER}/examples && \
cp ${BUILDFILESDIR}/postrm ${SOURCE_FOLDER}/debian/postrm && \
cp ${BUILDFILESDIR}/postrm ${SOURCE_FOLDER}/DEBIAN/postrm && \
cp ${BUILDFILESDIR}/prerm ${SOURCE_FOLDER}/debian/prerm && \
cp ${BUILDFILESDIR}/prerm ${SOURCE_FOLDER}/DEBIAN/prerm && \
cp ${BUILDFILESDIR}/templates ${SOURCE_FOLDER}/debian/templates && \
cp ${BUILDFILESDIR}/templates ${SOURCE_FOLDER}/DEBIAN/templates && \
echo 

##  Put perl stuff in /openils/ on the INSTALL system instead of  /usr/local/ on the BUILD system. 
sed -i "s^perl Build.PL^perl Build.PL install_base='../../debian/opensrf/$OPENSRF_PREFIX'^g" ${SOURCE_FOLDER}/src/perl/Makefile.am

## copy init script for opensrf. dpkg changes the init.d file to the name of the package, in this case opensrf.
cp -v ${BUILDFILESDIR}/eg_opensrf ${SOURCE_FOLDER}/debian/init.d

## set conf files
#echo "$OPENSRF_CONF_DIR/opensrf.xml" > ${SOURCE_FOLDER}/debian/conffiles
#echo "$OPENSRF_CONF_DIR/opensrf_core.xml" > ${SOURCE_FOLDER}/debian/conffiles


#Some folders still reference prefix as an absolutely path.
sed -i 's^$(MKDIR_P) $(VAR)^$(MKDIR_P) $(DESTDIR)/$(VAR)^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^$(MKDIR_P) $(PID)^$(MKDIR_P) $(DESTDIR)/$(PID)^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^$(MKDIR_P) $(LOG)^$(MKDIR_P) $(DESTDIR)/$(LOG)^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^$(MKDIR_P) $(SOCK)^$(MKDIR_P) $(DESTDIR)/$(SOCK)^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^$(MKDIR_P) $(jsdir)^$(MKDIR_P) $(DESTDIR)/$(jsdir)^g' ${SOURCE_FOLDER}/src/Makefile.in
#sed -i 's^cp -r @srcdir@/javascript/* $(jsdir)/^cp -r @srcdir@/javascript/* $(DESTDIR)/$(jsdir)/^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^cp -r @srcdir@/javascript/\* $(jsdir)/^cp -r @srcdir@/javascript/\* $(DESTDIR)/$(jsdir)/^g' ${SOURCE_FOLDER}/src/Makefile.in
sed -i 's^cp -r @srcdir@/javascript/\* $(jsdir)/^cp -r @srcdir@/javascript/\* $(DESTDIR)/$(jsdir)/^g' ${SOURCE_FOLDER}/src/Makefile.am
sed -i 's^$(MKDIR_P) $(VAR)^$(MKDIR_P) $(DESTDIR)/$(VAR)^g' ${SOURCE_FOLDER}/src/Makefile.am
sed -i 's^$(MKDIR_P) $(PID)^$(MKDIR_P) $(DESTDIR)/$(PID)^g' ${SOURCE_FOLDER}/src/Makefile.am
sed -i 's^$(MKDIR_P) $(LOG)^$(MKDIR_P) $(DESTDIR)/$(LOG)^g' ${SOURCE_FOLDER}/src/Makefile.am
sed -i 's^$(MKDIR_P) $(SOCK)^$(MKDIR_P) $(DESTDIR)/$(SOCK)^g' ${SOURCE_FOLDER}/src/Makefile.am
sed -i 's^$(MKDIR_P) $(jsdir)^$(MKDIR_P) $(DESTDIR)/$(jsdir)^g' ${SOURCE_FOLDER}/src/Makefile.am
#cp -r ./javascript/* /openils/lib/javascript/
#cp: target `/openils/lib/javascript/' is not a directory



## fix apxs2 install stuff
APACHE_CONF=${DEST_ROOT}/etc/apache2/
APACHE_MODS=${DEST_ROOT}/usr/lib/apache2/modules
mkdir -pv $APACHE_CONF
mkdir -pv $APACHE_MODS
mkdir -pv ${DEST_ROOT}/etc/apache2/mods-available
sed -i "s^(APXS2) -i -a @srcdir@/osrf_json_gateway.la^(APXS2) -S LIBEXECDIR='$APACHE_MODS' -S SYSCONFDIR='$APACHE_CONF' -i  @srcdir@/osrf_json_gateway.la^g" ${SOURCE_FOLDER}/src/gateway/Makefile.in
sed -i "s^(APXS2) -i -a @srcdir@/osrf_json_gateway.la^(APXS2) -S LIBEXECDIR='$APACHE_MODS' -S SYSCONFDIR='$APACHE_CONF' -i  @srcdir@/osrf_json_gateway.la^g" ${SOURCE_FOLDER}/src/gateway/Makefile.am
sed -i "s^(APXS2) -i -a @srcdir@/osrf_http_translator.la^(APXS2) -S LIBEXECDIR='$APACHE_MODS' -S SYSCONFDIR='$APACHE_CONF' -i  @srcdir@/osrf_http_translator.la^g" ${SOURCE_FOLDER}/src/gateway/Makefile.in
sed -i "s^(APXS2) -i -a @srcdir@/osrf_http_translator.la^(APXS2) -S LIBEXECDIR='$APACHE_MODS' -S SYSCONFDIR='$APACHE_CONF' -i  @srcdir@/osrf_http_translator.la^g" ${SOURCE_FOLDER}/src/gateway/Makefile.am


BuildPackage

cd $WORKDIR
